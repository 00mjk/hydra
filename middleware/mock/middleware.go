// Automatically generated by MockGen. DO NOT EDIT!
// Source: middleware.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	handler "github.com/ory-am/common/handler"
	. "github.com/ory-am/hydra/middleware"
)

// Mock of Middleware interface
type MockMiddleware struct {
	ctrl     *gomock.Controller
	recorder *_MockMiddlewareRecorder
}

// Recorder for MockMiddleware (not exported)
type _MockMiddlewareRecorder struct {
	mock *MockMiddleware
}

func NewMockMiddleware(ctrl *gomock.Controller) *MockMiddleware {
	mock := &MockMiddleware{ctrl: ctrl}
	mock.recorder = &_MockMiddlewareRecorder{mock}
	return mock
}

func (_m *MockMiddleware) EXPECT() *_MockMiddlewareRecorder {
	return _m.recorder
}

func (_m *MockMiddleware) IsAuthorized(resource string, permission string, environment *Env) func(handler.ContextHandler) handler.ContextHandler {
	ret := _m.ctrl.Call(_m, "IsAuthorized", resource, permission, environment)
	ret0, _ := ret[0].(func(handler.ContextHandler) handler.ContextHandler)
	return ret0
}

func (_mr *_MockMiddlewareRecorder) IsAuthorized(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAuthorized", arg0, arg1, arg2)
}

func (_m *MockMiddleware) IsAuthenticated(next handler.ContextHandler) handler.ContextHandler {
	ret := _m.ctrl.Call(_m, "IsAuthenticated", next)
	ret0, _ := ret[0].(handler.ContextHandler)
	return ret0
}

func (_mr *_MockMiddlewareRecorder) IsAuthenticated(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAuthenticated", arg0)
}

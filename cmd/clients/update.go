package clients

import (
	"fmt"
	"github.com/ory/hydra/cmd/cli"
	"github.com/ory/hydra/internal/httpclient/client/admin"
	"github.com/ory/hydra/internal/httpclient/models"
	"github.com/ory/x/cmdx"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"
)

func newUpdateCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "update <id> [<client.json>]",
		Args:  cobra.RangeArgs(1, 2),
		Short: "Update an entire OAuth 2.0 Client",
		Long: fmt.Sprintf(`This command replaces an OAuth 2.0 Client by its ID.

Please be aware that this command replaces the entire client.

If only the name flag (-n "my updated app") is provided, the all other fields are updated to their default values.

To read a client from a JSON file, specify the filename argument. %s

%s
`, helperStdInFile, autoGeneratedSecretDescription),
		Example: `As a workaround until a patch operation is supported, you can update e.g. the name by first getting the current client and then overwriting the value:

	$ hydra clients get client-1 | hydra clients update  -n "my updated app" client-1 -`,
		RunE: updateClient,
	}

	cmd.Flags().AddFlagSet(packageFlags)

	registerClientFlags(cmd.Flags())
	cli.RegisterSecretEncryptionFlags(cmd.Flags())

	return cmd
}

func updateClient(cmd *cobra.Command, args []string) error {
	m := cli.ConfigureClient(cmd)

	newSecret, err := cmd.Flags().GetString(FlagSecret)
	if err != nil {
		return errors.WithStack(err)
	}

	if newSecret != "" {
		warnClientSecretFlag(cmd)
	}

	// create the encrypt function before the request to catch errors before modifications happen
	encrypt, err := cli.NewEncryptionFunc(cmd, nil)
	if err != nil {
		return err
	}

	var c *models.OAuth2Client
	if len(args) == 2 {
		var err error
		c, err = clientFromAllSources(cmd, args[1])
		if err != nil {
			return err
		}
	} else {
		var err error
		c, err = clientFromFlags(cmd)
		if err != nil {
			return err
		}
	}

	c.ClientID = args[0]
	c.ClientSecret = newSecret

	response, err := m.Admin.UpdateOAuth2Client(admin.NewUpdateOAuth2ClientParams().WithID(c.ClientID).WithBody(c))
	if err != nil {
		_, _ = fmt.Fprintf(cmd.ErrOrStderr(), "The request failed with the following error message:\n%s", cli.FormatSwaggerError(err))
	}

	result := response.Payload

	enc, err := encrypt(result.ClientSecret)
	if err != nil {
		_, _ = fmt.Fprintf(cmd.ErrOrStderr(), "Failed to encrypt client secret: %s", err)
		return cmdx.FailSilently(cmd)
	}

	result.ClientSecret = enc

	cmdx.PrintRow(cmd, (*outputOAuth2Client)(result))
	return nil
}

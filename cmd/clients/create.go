/*
 * Copyright Â© 2015-2018 Aeneas Rekkas <aeneas+oss@aeneas.io>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author		Aeneas Rekkas <aeneas+oss@aeneas.io>
 * @copyright 	2015-2018 Aeneas Rekkas <aeneas+oss@aeneas.io>
 * @license 	Apache-2.0
 */

package clients

import (
	"fmt"
	"github.com/ory/hydra/cmd/cli"
	"github.com/ory/hydra/internal/httpclient/client/admin"
	"github.com/ory/hydra/internal/httpclient/models"
	"github.com/ory/hydra/x"
	"github.com/ory/x/cmdx"
	"github.com/spf13/cobra"
)

// createCmd returns the create command
func newCreateCmd() *cobra.Command {
	cmd := &cobra.Command{
		Use:   "create [<client.json>]",
		Args:  cobra.RangeArgs(0, 1),
		Short: "Create a new OAuth 2.0 Client",
		Long: fmt.Sprintf(`This command creates an OAuth 2.0 Client which can be used to perform various OAuth 2.0 Flows like
the Authorize Code, Implicit, Refresh flow.

ORY Hydra implements the OpenID Connect Dynamic Client registration specification. Most flags are supported by this command
as well.

%s

%s
`, helperStdInFile, autoGeneratedSecretDescription),
		Example: `$ hydra clients create -n "my app" -c http://localhost/cb -g authorization_code -r code -a core,foobar
$ somehow-generate-client | hydra clients create -`,
		RunE: createClient,
	}

	cmd.Flags().AddFlagSet(packageFlags)
	registerClientFlags(cmd.Flags())
	cli.RegisterSecretEncryptionFlags(cmd.Flags())

	return cmd
}

func createClient(cmd *cobra.Command, args []string) error {
	var err error
	m := cli.ConfigureClient(cmd)

	secret, err := cmd.Flags().GetString(FlagSecret)
	if err != nil {
		return err
	}
	if secret == "" {
		var secretb []byte
		secretb, err = x.GenerateSecret(26)
		if err != nil {
			_, _ = fmt.Fprintf(cmd.ErrOrStderr(), "Could not generate OAuth 2.0 Client Secret: %s", err)
			return cmdx.FailSilently(cmd)
		}
		secret = string(secretb)
	} else {
		warnClientSecretFlag(cmd)
	}

	var c *models.OAuth2Client
	if len(args) != 0 {
		var err error
		c, err = clientFromAllSources(cmd, args[0])
		if err != nil {
			return err
		}
	} else {
		var err error
		c, err = clientFromFlags(cmd)
		if err != nil {
			return err
		}
	}

	c.ClientSecret = secret

	response, err := m.Admin.CreateOAuth2Client(admin.NewCreateOAuth2ClientParams().WithBody(c))
	if err != nil {
		_, _ = fmt.Fprintf(cmd.ErrOrStderr(), "The request failed with the following error message:\n%s", cli.FormatSwaggerError(err))
		return cmdx.FailSilently(cmd)
	}

	result := response.Payload

	encrypt, err := cli.NewEncryptionFunc(cmd, nil)
	if err != nil {
		return err
	}
	result.ClientSecret, err = encrypt(secret)
	if err != nil {
		_, _ = fmt.Fprintf(cmd.ErrOrStderr(), "Failed to encrypt client secret: %s", err)
		return cmdx.FailSilently(cmd)
	}

	cmdx.PrintRow(cmd, (*outputOAuth2Client)(result))
	return nil
}
